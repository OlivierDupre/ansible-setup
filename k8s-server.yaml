---
- hosts: master
  become: yes
  tasks:
  - name: test
    shell: echo "{{ ansible_user_dir }} / {{ ansible_user_id }}" > /home/odupre/test
  - name: Disable swap as it is mandatory for K8S installation
    shell: >
      sed -i.bak '/swapfile/d' /etc/fstab;
      swapoff -a;
      exit
    # https://medium.com/@Alibaba_Cloud/how-to-install-and-deploy-kubernetes-on-ubuntu-16-04-6769fd1646db
  - name: Add K8S repository signing key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present 
  - name: Add K8S repository
    apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
      state: present
  - name: Install kubelet & kubeadm
    apt:
      name: ['kubelet','kubeadm']
      state: latest
      update_cache: yes
  - name: Setup K8S cluster
    shell: |
      kubeadm init --pod-network-cidr=10.0.2.15/24
      exit 0
    register: output
  - debug: var=output.stdout_lines

  - name: Create folder for K8S config
    file:
      path: "{{ ansible_user_dir }}/.kube"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_id }}"
      state: directory
      mode: 0755
  - name: Save kubeadm output
    shell: echo "{{ output.stdout_lines }}" >> "{{ ansible_user_dir }}/.kube/init.log"
  - name: Setup K8S config
    shell: |
      cp -i /etc/kubernetes/admin.conf "{{ ansible_user_dir }}"/.kube/config
      chown "{{ ansible_user_id }}":"{{ ansible_user_id }}" "{{ ansible_user_dir }}/.kube/config"
      exit 0
<<<<<<< HEAD
    register: logname_home
  - name: Setup local kubectl
    file:
      path: {{ logname_home.stdout }}/.kube
      owner: {{ ansible_user_id }}
      group: {{ ansible_user_id }}
      state: directory
      mode: 0755
  - name: Copy Kube config
    copy:
      src: /etc/kubernetes/admin.conf
      dest: {{ logname_home.stdout }}/.kube/config
      owner: {{ ansible_user_id }}
      group: {{ ansible_user_id }}
      mode: 0644
  - name: Save kubeadm output
    shell: echo "{{ output.stdout_lines }}" >> "{{ logname_home.stdout }}/.kube/init.log"
=======
  # - name: Setup K8S config
  #   copy:
  #     src: /etc/kubernetes/admin.conf
  #     dest: "{{ ansible_user_dir }}/.kube/config"
  #     owner: "{{ ansible_user_id }}"
  #     group: "{{ ansible_user_id }}"
  #     mode: 0755
>>>>>>> 61471fe0b43a9961b57e7a9db405ad3b2c038fa0

  - name: Install calico pod network add-on
    # https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network
    # https://docs.projectcalico.org/v3.5/usage/calicoctl/install
    # Enjoy running:
    # * watch kubectl get pods --all-namespaces
    # * calicoctl get profiles -o wide
    shell: >
      kubectl apply -f k8s/etcd.yaml k8S/calico.yaml k8s/calicoctl.yaml
      kubectl taint nodes --all node-role.kubernetes.io/master-

      if [ ! -f ~/.bash_aliases ]; then
        touch ~/.bash_aliases
      fi

      nb_definitions=`grep 'calicoctl=' ~/.bash_aliases | wc -l`
      if [ $nb_definitions -eq 0 ]; then
        echo "alias calicoctl='kubectl exec -i -n kube-system calicoctl /calicoctl -- '" >> ~/.bash_aliases
      fi

      exit O

  - name: Install Kubernetes Dashboard
    # https://kubernetes.io/docs/concepts/cluster-administration/addons/#visualization-amp-control
    # https://github.com/kubernetes/dashboard#kubernetes-dashboard
    shell: >
      kubectl apply -f k8s/kubernetes-dashboard.yaml k8s/dashboard-admin-user.yaml
      nohup kubectl proxy &
      exit 0
      # Run
      # * kubectl proxy
      # Navigate to:
      # * http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/
      # Use:
      # * Token value output with following command:
      # * kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}') 

