---
- hosts: all
  become: yes
  tasks:
  - name: Disable swap as it is mandatory for K8S installation
    shell: >
      sed -i.bak '/swapfile/d' /etc/fstab;
      swapoff -a;
      exit
    # https://medium.com/@Alibaba_Cloud/how-to-install-and-deploy-kubernetes-on-ubuntu-16-04-6769fd1646db
  - name: Save logname (aka user) home as a variable
    # https://stackoverflow.com/a/7359006
    shell: > 
      echo $(getent passwd $SUDO_USER | cut -d: -f6)
    register: logname_home
  - name: Add K8S repository signing key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present 
  - name: Add K8S repository
    apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
      state: present
  - name: Create folder for K8S config
    file:
      path: "{{ logname_home.stdout }}/.kube"
      state: directory
      mode: 0755
  - name: Add K8S aliases
    copy:
      src: k8s_aliases
      dest: "{{ logname_home.stdout }}/.k8s_aliases"
  - name: Load K8S aliases
    shell: |
      nb_definitions=`grep k8s_aliases {{ logname_home.stdout }}/.bash_aliases | wc -l`
      if [ $nb_definitions -eq 0 ]; then
        echo "if [ -f {{ logname_home.stdout }}/.k8s_aliases ]; then"  >> {{ logname_home.stdout }}/.bash_aliases
        echo "  . {{ logname_home.stdout }}/.k8s_aliases"  >> {{ logname_home.stdout }}/.bash_aliases
        echo "fi"  >> {{ logname_home.stdout }}/.bash_aliases
      fi
      exit 0

# - hosts: master,nodes
#   become: yes
#   tasks:
#   - name: Install kubelet, kubeadm && kubectl
#     apt:
#       name: ['kubelet','kubeadm','kubectl']
#       state: latest
#       update_cache: yes



# kubectl create secret docker-registry gcr-access-token \
# --docker-server=gcr.io \
# --docker-username=oauth2accesstoken \
# --docker-password="$(gcloud auth print-access-token)" \
# --docker-email=dupreolivier@gmail.com

# kubectl patch serviceaccount default \
# -p '{"imagePullSecrets": [{"name": "gcr-access-token"}]}'

# k config unset current-context

# gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io

# https://cloud.google.com/kubernetes-engine/docs/how-to/preemptible-vms
# gcloud beta container clusters create [CLUSTER_NAME] --preemptible
# gcloud beta container node-pools create [POOL_NAME] --preemptible --cluster [CLUSTER_NAME]