---
- hosts: all
  become: yes
  tasks:
  # https://medium.com/@Alibaba_Cloud/how-to-install-and-deploy-kubernetes-on-ubuntu-16-04-6769fd1646db
  - name: Disable swap as it is mandatory for K8S installation and discouraged for SSD
    shell: >
      sed -i.bak '/swapfile/d' /etc/fstab;
      swapoff -a;
      exit

- hosts: dev
  become: yes
  tasks:
  - name: Install base packages
    apt:
      name: ['git','git-extras','wget','curl','tilix','vim','apt-transport-https','ca-certificates','software-properties-common','build-essential','libssl-dev','htop','tree','make','libc6-i386','lib32z1','libnss3','libc6','python','python3','python-pip','python3-pip','python-dev','libssl-dev','libcurl4-gnutls-dev','libexpat1-dev','unzip','python-lxml','g++','asciinema','gnupg-agent','snapd','apache2-utils','lsb-release','gnupg','gconf2','pkgconf']
      update_cache: yes
      state: latest
  - name: Install eg
    shell: |
      git clone https://github.com/srsudar/eg /opt/eg;
      ln -s /opt/eg/eg_exec.py /usr/local/bin/eg;
      exit 0
  - name: Install draw.io
    shell: curl -L https://github.com/jgraph/drawio-desktop/releases/download/v9.3.1/draw.io-amd64-9.3.1.deb -o /tmp/draw.io-amd64-9.3.1.deb  
      && sudo dpkg -i /tmp/draw.io-amd64-9.3.1.deb 
      && rm /tmp/draw.io-amd64-9.3.1.deb
      && exit 0
  - name: Install Snaps
    shell: |
      snap set system experimental.parallel-instances=true
      snap install fkill postman keepassxc
      snap install code-insiders --classic  # Load config with extension Settings Sync. Github token store separately, privately in notes with Gist Id.
      # snap install intellij-idea-community --classic
      # snap install kata-containers --classic
      snap install helm --classic
      snap install --classic go
  - name: Add snap to the PATH
    shell: | 
      nb_definitions=`grep /snap/bin ~/.bashrc | wc -l`
      if [ $nb_definitions -eq 0 ]; then
        echo 'export PATH="/snap/bin:$PATH"'  >> ~/.bashrc
      fi
      exit 0
  - name: Prepare VSCode installation
    shell: |
      curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg;
      install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/;
      rm  -f microsoft.gpg ;
      sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list';
      exit 0
  - name: Prepare gcloud-sdk installation
    shell: |
      . /etc/os-release
      export CLOUD_SDK_REPO="cloud-sdk-$UBUNTU_CODENAME"
      nb_definitions=`grep -R cloud-sdk /etc/apt/sources.list.d | wc -l`
      if [ $nb_definitions -eq 0 ]; then
        echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      fi
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - 
      exit 0
  - name: Prepare Azure CLI installation
    shell: |
      . /etc/os-release
      curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null
      echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $UBUNTU_CODENAME main" | tee /etc/apt/sources.list.d/azure-cli.list
      exit 0
  - name: Install az cli (kubectl will be installed with gcloud)
    apt:
      name: ['azure-cli']
      state: latest
      update_cache: yes
  #- name: Install Calicoctl
  #  shell: curl -O -L  https://github.com/projectcalico/calicoctl/releases/download/v3.6.1/calicoctl -o /bin/bash/calicoctl
  - name: Install kubeval to validate K8S manifests
    shell: |
      if [ ! \( -e /usr/local/bin/kubeval \) ]; then 
        PLATFORM=linux
        wget https://github.com/garethr/kubeval/releases/download/0.7.3/kubeval-${PLATFORM}-amd64.tar.gz;
        tar xf kubeval-${PLATFORM}-amd64.tar.gz;
        mv kubeval /usr/local/bin;
        rm kubeval-${PLATFORM}-amd64.tar.gz;
      fi
      exit 0
  - name: Install krew to facilitate kubectl plugin management
    shell: | 
      (
        set -x; cd "$(mktemp -d)" &&
        curl -fsSLO "https://storage.googleapis.com/krew/v0.2.1/krew.{tar.gz,yaml}" &&
        tar zxvf krew.tar.gz &&
        ./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" install \
          --manifest=krew.yaml --archive=krew.tar.gz
      )
      nb_definitions=`grep KREW ~/.bashrc | wc -l`
      if [ $nb_definitions -eq 0 ]; then
        echo 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"'  >> ~/.bashrc
      fi
      exit 0
  - name: Install kubectx & kubens to facilitate switching from one context or namespace to another
    shell: |
      if [ ! \( -e /usr/local/bin/kubectx \) || ! \( -e /usr/local/bin/kubectx \) ]; then 
        git clone https://github.com/ahmetb/kubectx /opt/kubectx;
        ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx;
        ln -s /opt/kubectx/kubens /usr/local/bin/kubens;

        COMPDIR=$(pkg-config --variable=completionsdir bash-completion)
        ln -sf /opt/kubectx/completion/kubens.bash $COMPDIR/kubens
        ln -sf /opt/kubectx/completion/kubectx.bash $COMPDIR/kubectx
      fi
      exit 0
  - name: Install kustomize
    shell: |
      opsys=linux 
      curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest | grep browser_download | grep $opsys | cut -d '"' -f 4 | xargs curl -O -L
      mv kustomize_*_${opsys}_amd64 /usr/bin/kustomize
      chmod 755 /usr/bin/kustomize
      exit 0
  - name: Install Dive... to dive into Docker layers
    shell: |
      nb_definitions=`apt list dive 2> /dev/null | grep install | wc -l`
      if [ $nb_definitions -eq 0 ]; then
        wget https://github.com/wagoodman/dive/releases/download/v0.7.2/dive_0.7.2_linux_amd64.deb;
        apt install ./dive_0.7.2_linux_amd64.deb;
        rm ./dive_0.7.2_linux_amd64.deb
      fi
      exit 0
  - name: Install Skaffold... to build and deploy continuously to K8S
    shell: |
      curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
      chmod +x skaffold
      sudo mv skaffold /usr/local/bin

- hosts: dev
  tasks:
  - name: Install gcloud-sdk -> NEEDS MANUAL ADDITIONAL STEPS! https://cloud.google.com/sdk/docs/quickstart-linux
    shell: |
      curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-243.0.0-linux-x86_64.tar.gz ;
      tar -zxf google-cloud-sdk-243.0.0-linux-x86_64.tar.gz ;
      rm google-cloud-sdk-243.0.0-linux-x86_64.tar.gz ;
      # Run ./google-cloud-sdk/install.sh
      # Run gcloud auth login;gcloud init; gcloud components update; gcloud components install alpha beta kubectl cloud-build-local docker-credential-gcr
      # Then... `gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE --project $PROJECT_NAME`
      exit 0
  - name: Install SDKMan
    shell: curl -s "https://get.sdkman.io" | bash
    args:
      warn: false
  - name: Install Java, Kotlin, Maven, Gradle, Springboot...
    shell: |
      cd "{{ ansible_env.HOME }}/.sdkman/bin/"
      source ./sdkman-init.sh
      sdk install java && sdk install kotlin && sdk install maven && sdk install gradle && sdk install springboot
      exit 0
  - name: Install NVM
    shell: >
      curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
    args:
      creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
      warn: false
  - name: Install Node
    shell: |
      source "{{ ansible_env.HOME }}/.nvm/nvm.sh"
      nvm install node
      exit 0
  # The awscli package is available in repositories for other package managers such as apt and yum, but you're not assured of getting the latest version unless you get it from pip
  - name: Install awscli
    pip:
      name: awscli
      executable: pip3
      extra_args: --upgrade
  # Configure with `aws configure` (Access key from console > IAM > User > Security credentials)
  # Check with `aws sts get-caller-identity`
  - name: Add pip install dir to PATH
    shell: | 
      nb_definitions=`grep .local/bin ~/.bashrc | wc -l`
      if [ $nb_definitions -eq 0 ]; then
        echo 'export PATH="$HOME/.local/bin:$PATH"'  >> ~/.bashrc
      fi
      exit 0