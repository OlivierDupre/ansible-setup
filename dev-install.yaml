---
# - hosts: all
#   become: yes
#   tasks:
#   - name: Install base packages
#     apt:
#       name: ['git','git-extras','wget','curl','tilix','vim','apt-transport-https','ca-certificates','software-properties-common','build-essential','libssl-dev','htop','tree','make','libc6-i386','lib32z1','libc6','python','python-pip','python3-pip','python-dev','libssl-dev','libcurl4-gnutls-dev','libexpat1-dev','unzip','python-lxml','g++','asciinema','gnupg-agent','snapd','apache2-utils']
#       update_cache: yes
#       state: latest
#   - name: Install eg
#     shell: |
#       git clone https://github.com/srsudar/eg /opt/eg;
#       ln -s /opt/eg/eg_exec.py /usr/local/bin/eg;

#       if [ ! -f ~/.bash_aliases ]; then
#         touch ~/.bash_aliases
#       fi

#       nb_definitions=`grep 'woman=' ~/.bash_aliases | wc -l`
#       if [ $nb_definitions -eq 0 ]; then
#         echo "alias woman='eg'" >> ~/.bash_aliases
#       fi  

#       exit 0

# - hosts: all
#   tasks:
#   - name: Install SDKMan
#     shell: curl -s "https://get.sdkman.io" | bash
#     args:
#       warn: false
#   - name: Install SDKMan
#     shell: |
#       cd "{{ ansible_env.HOME }}/.sdkman/bin/"
#       source ./sdkman-init.sh
#       sdk install java
#       cd
#       exit 0
#   - name: Install NVM
#     shell: >
#       curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
#     args:
#       creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
#       warn: false
#   - name: Install Node
#     shell: |
#       source "{{ ansible_env.HOME }}/.nvm/nvm.sh"
#       nvm install node
#       exit 0

- hosts: master
  become: yes
  tasks:
  # - name: Install Snaps
  #   shell: |
  #     snap install fkill postman 
  #     snap install code --classic  # Load config with extension Settings Sync. Github token store separately, privately in notes with Gist Id.
  #     snap install intellij-idea-community --classic
  #     snap install kata-containers --classic
  #     snap install google-cloud-sdk --classic
  #     snap install aws-cli --classic
  #     snap install helm --classic
  #     snap install keepassxc
  # - name: Install draw.io
  #   shell: curl -L https://github.com/jgraph/drawio-desktop/releases/download/v9.3.1/draw.io-amd64-9.3.1.deb -o /tmp/draw.io-amd64-9.3.1.deb  
  #     && sudo dpkg -i /tmp/draw.io-amd64-9.3.1.deb 
  #     && rm /tmp/draw.io-amd64-9.3.1.deb
  - name: Install kubectl
    apt:
      name: ['kubectl']
      state: latest
      update_cache: yes
  # - name: Install Calicoctl
  #   shell: curl -O -L  https://github.com/projectcalico/calicoctl/releases/download/v3.6.1/calicoctl -o /bin/bash/calicoctl
  - name: Install kubeval to validate K8S manifests
    shell: |
      if [ ! \( -e /usr/local/bin/kubeval \) ]; then 
        PLATFORM=linux
        wget https://github.com/garethr/kubeval/releases/download/0.7.3/kubeval-${PLATFORM}-amd64.tar.gz;
        tar xf kubeval-${PLATFORM}-amd64.tar.gz;
        mv kubeval /usr/local/bin;
      fi
      exit 0
  - name: Install krew to facilitate kubectl plugin management
    shell: | 
      (
        set -x;
        cd "$(mktemp -d)" && curl -fsSLO "https://storage.googleapis.com/krew/v0.2.1/krew.{tar.gz,yaml}" && tar xzvf krew.tar.gz && ./krew-"$(uname | tr '[:upper:]''[:lower:]')_amd64" install \ --manifest=krew.yaml --archive=krew.tar.gz
      )
      nb_definitions=`grep KREW ~/.bashrc | wc -l`
      if [ $nb_definitions -eq 0 ]; then
        echo 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"'  >> ~/.bashrc
      fi
      exit 0
  - name: Install kubectx & kubens to facilitate switching from one context or namespace to another
    shell: |
      if [ ! \( -e /usr/local/bin/kubectx \) || ! \( -e /usr/local/bin/kubectx \) ]; then 
        git clone https://github.com/ahmetb/kubectx /opt/kubectx;
        ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx;
        ln -s /opt/kubectx/kubens /usr/local/bin/kubens;

        COMPDIR=$(pkg-config --variable=completionsdir bash-completion)
        ln -sf /opt/kubectx//completion/kubens.bash $COMPDIR/kubens
        ln -sf /opt/kubectx//completion/kubectx.bash $COMPDIR/kubectx
      fi
      exit 0